// Code generated for package generator by go-bindata DO NOT EDIT. (@generated)
// sources:
// generator/template/README.md.tmpl
// generator/template/go.mod.tmpl
// generator/template/integration.go.tmpl
// generator/template/integration.yaml.tmpl
// generator/template/internal/root.go.tmpl
package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateReadmeMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x73\x8a\x0f\x59\xeb\x01\xdc\x89\xdd\x08\x62\x8a\xc4\x03\x4c\x61\xb0\x83\x31\x91\x74\x52\x91\xd2\xbb\x0b\xa5\x28\xb8\x7d\xbc\xc7\x73\x0e\xd3\x84\x6d\x50\x8b\x72\xe0\x41\xce\xfc\x10\xcc\x33\x5a\x4d\xcf\xac\xc9\x70\x4c\x26\xb7\xc2\xa6\x39\x11\x39\xe7\xe0\x47\x29\xa3\xca\x8b\x28\xf8\xc6\xef\x10\x38\xde\xc1\x5d\xae\x86\x77\xae\x05\xba\x06\xfc\x2d\xf6\xd5\xfa\x5c\x88\x36\xcb\xaa\xad\x5d\xd4\xa1\x97\xb2\xae\xfe\xf1\xf5\x72\xfa\xd1\x86\x6d\x71\x3e\x01\x00\x00\xff\xff\x80\x77\xa9\xdf\xa7\x00\x00\x00")

func templateReadmeMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateReadmeMdTmpl,
		"template/README.md.tmpl",
	)
}

func templateReadmeMdTmpl() (*asset, error) {
	bytes, err := templateReadmeMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/README.md.tmpl", size: 167, mode: os.FileMode(420), modTime: time.Unix(1591369355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateGoModTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xbd\x4e\xc3\x30\x14\x47\xf1\x99\xfb\x14\xff\x0d\x18\xea\xb8\x51\xbf\x82\x04\x13\x12\x03\x43\x19\x78\x81\xc4\xb9\x8d\x2d\x39\xbe\xc1\xb9\x4e\x41\x55\xdf\x1d\x75\x63\x62\xfd\x9d\xe5\x8c\xd2\x97\xc8\xb8\x5c\xcc\xc7\xfb\xdb\xf5\x4a\x34\x08\xd6\x66\xbd\x21\xca\xfc\x55\x42\x66\x3c\xd0\xdd\x10\xd4\x97\xce\x38\x19\xab\x29\xa4\x49\xab\x76\xe0\xa4\x26\xf1\xb7\x62\xb1\xc6\x1a\xbb\xaa\x6d\x6d\xed\xce\x36\xb6\x5e\x37\xdb\xed\xaa\xdb\x74\xbb\x93\x73\xfb\xc3\xa1\xd9\xd3\x23\x51\x55\xe1\xf3\xf8\x7a\x7c\x82\xfa\x30\x23\xcc\x90\x14\x7f\x30\xb3\xe2\xec\x43\x64\x9c\xf9\x3e\x33\x42\x42\x6e\xa7\xd0\xa3\xe7\xc5\x40\x92\xbb\x05\x0c\xac\x90\xa2\x90\x13\xd4\xb7\x7a\xa3\xd9\x4b\x89\x3d\x32\x8f\xb2\x30\x65\x9e\x62\xeb\x18\xff\x6d\x3e\xbf\xc0\x98\x3f\x40\xbf\x01\x00\x00\xff\xff\x8f\x0d\x45\xac\xf9\x00\x00\x00")

func templateGoModTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGoModTmpl,
		"template/go.mod.tmpl",
	)
}

func templateGoModTmpl() (*asset, error) {
	bytes, err := templateGoModTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/go.mod.tmpl", size: 249, mode: os.FileMode(420), modTime: time.Unix(1591711735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateIntegrationGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x4a\xc6\x30\x10\x46\xd7\x9d\x53\x0c\x59\xc8\xdf\x4d\x72\x08\x17\x22\xa2\xb8\xf0\x02\x63\x1d\xf3\x0f\x36\x93\x90\x4e\xa4\x10\x72\x77\xb1\x0a\xd6\xed\xc7\xfb\x78\xaf\xd0\xf2\x41\x91\x31\x91\x28\x80\xa4\x92\xab\xe1\x05\x26\xd7\xbb\x7f\x7e\xb8\x1b\x23\x88\x1a\x57\xa5\xd5\xc1\xe4\xa2\xd8\xb5\xbd\xfa\x25\xa7\x50\x44\x8b\x05\x8a\xac\xe6\x95\x77\x0b\xb5\xa9\x72\x75\x30\x03\x84\x80\xf7\x6a\x1c\x2b\x99\x64\x45\xd9\xb0\x6d\xfc\x86\x96\x91\xf7\x43\x60\x57\x46\xf9\x23\xe0\x93\xea\xff\xc7\xaf\xd3\xf7\xee\x5f\xc4\x56\xbe\xa5\x8d\x9f\x28\xf1\x18\x27\x0c\xe0\xbd\xe9\x72\xa4\x5f\x66\xec\x30\xfd\x24\xf8\xc7\xef\xe1\xe6\x04\xce\x30\xe0\x2b\x00\x00\xff\xff\x39\xd3\xb2\xf3\xe9\x00\x00\x00")

func templateIntegrationGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateIntegrationGoTmpl,
		"template/integration.go.tmpl",
	)
}

func templateIntegrationGoTmpl() (*asset, error) {
	bytes, err := templateIntegrationGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/integration.go.tmpl", size: 233, mode: os.FileMode(420), modTime: time.Unix(1591369355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateIntegrationYamlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xc1\x6e\xd3\x40\x10\xbd\xe7\x2b\x46\x11\x47\x9a\x48\x1c\x2d\x13\xa9\x54\x08\x2a\x2a\x88\x4a\xab\x8a\x53\xb5\xb1\xc7\xf6\x90\xf5\x8e\x99\x9d\x4d\x14\x22\xff\x3b\x5a\x3b\x6d\x6c\xd2\x82\x38\x70\xeb\xcd\x9e\xf7\x66\xfc\xde\xec\x8c\xd7\x99\x1a\x13\x98\xee\xf7\xb3\x1b\x52\x8b\x17\xc6\xe3\x67\x53\x63\xdb\x4e\x27\x82\xc5\xbd\xee\x9a\x03\x7c\xc5\x5b\x94\x21\x9c\xa3\xcf\x84\x1a\x25\x76\x09\x4c\x6f\x2a\xf2\x40\x1e\xb4\x42\xe0\xa2\xa0\x8c\x8c\x85\xfd\x1e\xc6\x65\xa1\x6d\x81\x9c\x62\x29\x26\xe6\x41\xc1\x02\x4b\x72\x0d\x93\xd3\xe9\xa4\x09\x2b\x4b\xbe\x42\x49\x26\x00\x47\x61\xcb\x87\xf0\xc3\x97\x01\x82\xd8\xdf\xb0\xdb\xeb\xab\x1e\x32\x1b\xa3\x46\xee\x4f\x19\xe7\x1d\xd0\x93\x28\x47\xa7\x54\x10\x4a\x4f\xba\x7c\x7c\x8f\x78\x66\x1a\xb3\x22\x4b\x4a\xe8\x93\xc9\x7e\x7f\x06\x62\x5c\x89\xf0\x6a\x63\x2c\x24\x6f\x61\x76\x31\x20\x40\xdb\x4e\x00\xce\xa2\xd7\x0e\x6f\xdb\x2e\x03\x5d\xde\xb6\x13\x72\x5e\x8d\xb5\x9d\xd9\x68\xaa\xe6\x3c\x96\x04\x88\x19\x99\xe5\x90\x1f\x9e\x3d\xda\xa2\x36\xce\x94\x18\x23\x19\xbb\x82\xca\x9e\xd7\xb1\xfa\x47\x00\x87\xba\x65\x59\x3f\xbc\x02\x54\xec\x35\x76\xca\x1f\x43\xb1\xdc\xd4\x34\x34\x2b\x49\xab\xb0\x9a\x65\x5c\x4f\x0f\xe0\xd8\xd8\x91\xbe\xc5\xd5\xec\x23\xf3\x7a\x10\x32\x41\xab\xd9\x97\xf3\xa0\xd5\x9b\x43\x74\x74\xde\x8b\x47\x6a\xda\x2c\x06\x9f\xbe\xab\xd0\xc1\x8e\x43\x97\xcf\x42\x3f\xf1\xf1\x7c\x41\x19\x4c\x96\xa1\xf7\x91\x20\x4f\x0f\x87\xc9\x32\x0e\x4e\x5f\x77\x35\xb6\x64\x2d\x94\x62\x9c\x42\xea\x55\xd8\x95\x8b\x6b\x34\x39\x18\x97\xc3\x9d\x90\x62\x3a\x3f\x84\xa1\x41\xa9\xc9\x7b\x62\xe7\x41\xf9\xe8\x2d\x9d\x0f\xe4\xa5\xc1\x0e\xb5\x02\xa4\x96\x16\x4b\xe1\xef\x98\xa9\x4f\xe7\x96\x4e\xd1\x5b\x8f\xf2\x0c\xf4\x41\x38\x34\xcf\x60\x97\xde\x07\x7c\x06\x7b\xc7\x46\xf2\x13\x2c\x9d\x0f\xc5\x8d\x9b\xfa\x8d\x03\x64\xc6\x81\xe0\x86\xd7\x08\x1a\x57\xed\xd0\x49\xa3\x60\xdc\x0e\x94\x6a\x84\xd5\x0e\x04\x35\x88\x23\x57\xc6\x66\xc7\x55\xfc\x8a\xaa\xe4\x4a\xdf\xf5\x2c\x47\x8b\xda\x81\xdd\xb2\x0e\xf6\x90\xa5\xcf\xde\xf0\x3a\xe2\xa4\x40\xee\x4f\xa7\x94\xd7\xe4\xc8\x6b\x9f\x3d\x3b\xed\xf6\x60\x9c\x93\x97\xf1\x79\x19\x9f\xf1\x29\xbd\x77\x8a\xd2\x08\x79\x04\x8f\xb2\x41\xf9\xfb\x40\x01\x70\x37\x3a\xa3\xdf\x56\x7f\x45\x04\xb1\x03\xb3\xa3\x31\x5b\x5a\x34\x1e\xa1\x11\xde\x50\x8e\x9d\xa3\xdb\xeb\xab\x68\xae\x13\x37\xd0\xf1\xa4\xce\x5e\xdc\xa0\x78\x7f\x1b\x7a\x15\x72\xe5\x20\x2c\xf8\x23\x90\x60\x9e\x80\x4a\xc0\x13\x81\xa6\xa1\xfb\x35\xee\xfe\x41\xe4\xf9\xf2\xf2\x13\xee\xfe\xb7\xce\x5f\x01\x00\x00\xff\xff\x0b\x1d\xa8\x81\xfb\x07\x00\x00")

func templateIntegrationYamlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateIntegrationYamlTmpl,
		"template/integration.yaml.tmpl",
	)
}

func templateIntegrationYamlTmpl() (*asset, error) {
	bytes, err := templateIntegrationYamlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/integration.yaml.tmpl", size: 2043, mode: os.FileMode(420), modTime: time.Unix(1591646422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInternalRootGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4b\x6f\xe3\x36\x10\x3e\x8b\xbf\x62\xa0\x93\x5c\xb8\x56\xdf\x8f\x00\x3e\x14\x49\xd1\x0d\x90\x2e\xb6\x48\x80\x3d\x14\x45\x40\x49\x63\x89\x35\x45\x72\xc9\x51\x9c\x6d\x90\xff\x5e\xf0\x21\x4b\xd9\xc4\x75\x5c\x6c\x2e\xa1\x46\x9a\xf9\xbe\xf9\x66\x38\x63\xc3\xeb\x2d\x6f\x11\x84\x22\xb4\x8a\x4b\xc6\x44\x6f\xb4\x25\x28\x58\x96\xb7\x82\xba\xa1\x5a\xd5\xba\x2f\x8d\x50\x86\x4a\xde\xa2\xa2\x95\xc2\x7b\x2a\x5d\xb3\xcd\xd9\x82\xb1\xb2\x84\x87\x07\x58\xdd\x08\x92\x78\xce\x1d\xbe\xe5\x3d\xc2\xe3\xe3\xa5\x22\x6c\x2d\x27\xa1\x15\x08\x07\x5c\x05\x84\xd1\xb2\xd1\xf6\x45\x2f\x46\x1f\x0d\x1e\x8d\xe7\xc8\x0e\x35\xc1\x03\xcb\xa4\x6e\x5b\xb4\x00\xae\xd9\xae\xae\xc2\x99\x65\xb5\x56\x1b\xd1\x46\xdb\x79\x38\xb3\xac\xe7\x8a\xfb\x0f\xbd\xed\xf7\x78\x66\x99\xc5\xcd\x8d\x87\x73\x64\x85\x6a\x19\xcb\x5a\xcb\x4d\xf7\xc7\x15\x40\x74\xfe\x2d\x3e\x9e\x4b\x81\x8a\x58\xd6\x11\x99\x78\x0e\x6f\xdf\xdc\xdc\xbc\x4b\xaf\x1e\x19\xbb\xe3\x16\x6e\x83\x7d\x4e\x74\x0d\xc5\x17\x47\x92\x59\x14\x4a\xc8\x28\xe3\x35\x71\x4b\x5e\xac\x9a\x4b\x89\x0d\xec\x3a\x54\x40\x1d\x3e\x51\x4e\x38\x70\xfe\x3b\xa1\x5a\x18\x0c\xdb\x0c\xaa\x86\xa2\x85\xa3\x30\x31\x7a\x91\x04\x9b\xf4\x5a\x42\xd2\x6b\x92\x6b\x09\x2f\xc8\xb5\x00\xb4\xd6\x57\x8d\x65\xed\x2a\x45\x59\x8f\x71\xde\x0b\xea\x52\xe8\x25\xe4\x66\xdb\xe6\x4b\xc8\x3d\xa3\x2b\xbd\x43\x3b\x63\x94\x2f\xbc\x7b\x42\x5c\x27\x68\x6f\x1a\x11\xd7\x23\xb6\x37\x8e\x05\x5a\x1f\x08\xc6\xb2\x84\x7f\xa9\x36\xba\x18\x69\x2d\x21\x1f\x15\xf2\x70\x16\x69\xb0\x0a\x94\x90\xbe\x4e\x65\x09\xbf\x2a\xab\xa5\xfc\x54\x67\x0e\x0a\x77\x4f\x95\x56\x8e\xb8\xaa\x31\xb4\x6f\xd3\x60\x73\x82\xd8\x11\xa3\xd8\x87\x88\x8d\x11\x1f\x66\x4a\x1e\xa0\x8f\x91\xa1\xd2\x04\xa2\x37\x12\x7b\x54\x84\xcd\x8b\xc9\x5c\x08\xd7\x0b\xe7\x9e\x65\xa3\x00\xef\x85\x0b\x5d\x72\x28\x27\x8b\xbd\xbe\x3b\x29\xab\x04\xf6\x7f\xd3\x6a\x12\xd7\xd7\xe4\xf5\x1e\xab\x37\x5a\x6f\x9f\x57\x69\x87\x55\x97\x5e\x58\xac\x51\xdc\x61\x03\x5a\x41\x85\x1d\x97\x1b\xd0\x9b\x4f\x2f\xcc\x09\xe9\x25\xcc\x62\x84\xf0\x69\x24\xdb\xf1\xe4\x46\xa7\xd7\x24\x77\x4d\xda\xbc\xe6\x9e\x77\x03\x85\x0a\x36\x7a\x17\x47\x66\x2d\x91\xab\x13\x6f\xbd\x36\xc5\x71\xf6\x8e\xb4\x31\x07\x2f\xcc\x7d\x58\x08\x13\x61\xd2\x40\x28\xe5\x33\xce\xa4\xc1\x0e\xa9\xf9\xbc\xcb\x29\x17\x26\x38\x14\xd1\x2f\x28\x1f\x2d\xaf\xb8\x2c\xc9\xc5\x5f\xf9\xa0\x37\xcb\xca\x12\xde\x09\x83\xd0\x0f\x8e\xa0\xc2\x19\xed\x0a\x5b\x31\x23\x08\x5c\x35\x63\x1b\x01\x07\xe3\x9d\xbc\xce\x0e\x55\x13\x84\xe7\xc4\x59\x16\xcc\x67\xeb\xe4\xb3\xf2\xa1\x8b\x04\x73\x4d\x9c\xe2\x80\x80\x7a\x70\xa4\x7b\x3f\x34\x0d\xd6\x62\x23\x6a\x4f\x89\x10\x74\xf5\x37\xd6\x14\xc2\x52\x27\xdc\x13\xc1\x3c\xfc\xe8\xc7\xb2\xf8\xfd\x04\x14\x82\x8f\x48\xe7\xe9\xb3\xcb\x0b\xd8\x09\x29\x21\x55\xc9\x97\x60\x8f\x2c\x9a\x04\x83\x63\x01\xb2\x7a\x72\x9b\x02\x4f\xb1\xf6\xd1\xe3\x44\x0e\x8b\xfa\xe3\x0b\xa9\xc4\x41\x3d\xcc\xb6\x77\xc8\x65\xe2\x9e\x46\xfa\x0c\x23\x18\x42\xfc\x76\x35\x2e\xd6\x35\xec\x27\xfd\xb8\x5d\xd3\x7a\x29\x16\xab\xb7\xb8\x2b\x72\xbf\x64\xdd\x59\x59\x3a\xdd\xe3\x6d\x70\xfb\x20\x6f\xb9\x11\xe1\x37\x48\xee\x37\x93\xf9\x33\xee\xeb\xbf\xe2\xbf\x07\x96\x65\xf9\x2f\x03\x75\xda\x8a\x7f\x02\xbd\xfc\x0c\xf2\x0a\xb9\x45\x0b\x5f\x7f\xf3\xed\x77\xdf\xff\xf0\xe3\x4f\x3f\x7f\x95\x2f\x59\xf6\x18\x96\xcf\x6c\x8d\xcf\xe9\xf8\x75\xfe\x5f\x5c\x2c\x3a\xfa\x8c\x44\xf6\xed\x7c\x81\xd5\xd0\x1e\xea\xe7\x78\x23\x43\x85\xc2\xf3\xd8\xb6\x1d\x5a\x0c\xd6\x2f\xe7\x7f\xc1\xf2\x61\x10\x84\xb1\x2d\x74\x6f\x84\x44\x7b\xc6\xb2\x5b\x58\x87\xe6\x8e\xa7\xd0\x67\xf1\x38\xb5\x47\x7a\x4e\x0b\xf9\xc9\x0c\xf8\x37\x00\x00\xff\xff\xc4\x12\x2e\x3e\x23\x0a\x00\x00")

func templateInternalRootGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInternalRootGoTmpl,
		"template/internal/root.go.tmpl",
	)
}

func templateInternalRootGoTmpl() (*asset, error) {
	bytes, err := templateInternalRootGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/internal/root.go.tmpl", size: 2595, mode: os.FileMode(420), modTime: time.Unix(1591716328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/README.md.tmpl":        templateReadmeMdTmpl,
	"template/go.mod.tmpl":           templateGoModTmpl,
	"template/integration.go.tmpl":   templateIntegrationGoTmpl,
	"template/integration.yaml.tmpl": templateIntegrationYamlTmpl,
	"template/internal/root.go.tmpl": templateInternalRootGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"README.md.tmpl":        &bintree{templateReadmeMdTmpl, map[string]*bintree{}},
		"go.mod.tmpl":           &bintree{templateGoModTmpl, map[string]*bintree{}},
		"integration.go.tmpl":   &bintree{templateIntegrationGoTmpl, map[string]*bintree{}},
		"integration.yaml.tmpl": &bintree{templateIntegrationYamlTmpl, map[string]*bintree{}},
		"internal": &bintree{nil, map[string]*bintree{
			"root.go.tmpl": &bintree{templateInternalRootGoTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

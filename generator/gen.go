// Code generated for package generator by go-bindata DO NOT EDIT. (@generated)
// sources:
// generator/template/README.md.tmpl
// generator/template/go.mod.tmpl
// generator/template/integration.go.tmpl
// generator/template/integration.yml.tmpl
// generator/template/internal/root.go.tmpl
package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateReadmeMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x73\x8a\x0f\x59\xeb\x01\xdc\x89\xdd\x08\x62\x8a\xc4\x03\x4c\x61\xb0\x83\x31\x91\x74\x52\x91\xd2\xbb\x0b\xa5\x28\xb8\x7d\xbc\xc7\x73\x0e\xd3\x84\x6d\x50\x8b\x72\xe0\x41\xce\xfc\x10\xcc\x33\x5a\x4d\xcf\xac\xc9\x70\x4c\x26\xb7\xc2\xa6\x39\x11\x39\xe7\xe0\x47\x29\xa3\xca\x8b\x28\xf8\xc6\xef\x10\x38\xde\xc1\x5d\xae\x86\x77\xae\x05\xba\x06\xfc\x2d\xf6\xd5\xfa\x5c\x88\x36\xcb\xaa\xad\x5d\xd4\xa1\x97\xb2\xae\xfe\xf1\xf5\x72\xfa\xd1\x86\x6d\x71\x3e\x01\x00\x00\xff\xff\x80\x77\xa9\xdf\xa7\x00\x00\x00")

func templateReadmeMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateReadmeMdTmpl,
		"template/README.md.tmpl",
	)
}

func templateReadmeMdTmpl() (*asset, error) {
	bytes, err := templateReadmeMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/README.md.tmpl", size: 167, mode: os.FileMode(420), modTime: time.Unix(1591284823, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateGoModTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xb1\x4e\xc3\x30\x10\x87\xf1\x99\x7b\x8a\xff\x06\x0c\x75\x1c\x13\xa1\x08\x09\x26\x24\x06\x86\x32\xf0\x02\x69\x7c\xc4\x96\x1c\x5f\x70\xce\x29\xa8\xea\xbb\xa3\x6e\x4c\x5d\x7f\xdf\xf2\xcd\xe2\x6b\x62\x9c\x4e\xe6\xe3\xfd\xed\x7c\x26\x9a\x04\xad\x69\x3b\xa2\xc2\xdf\x35\x16\xc6\x1d\xdd\x4c\x51\x43\x3d\x98\x51\xe6\x66\x89\x79\xd1\x66\x98\x38\xab\xc9\xfc\xa3\xd8\xac\xb1\xc6\xee\x9c\x75\xd6\x3e\x5a\x67\xbb\x87\xbe\xeb\x77\xce\xf7\x6d\x7f\xf0\xde\x76\xad\xa3\x7b\xa2\xa6\xc1\xe7\xfe\x75\xff\x04\x0d\x71\x45\x5c\x21\x39\xfd\x62\x65\xc5\x31\xc4\xc4\x38\xf2\x6d\x61\xc4\x8c\x32\x2c\xd1\xc3\xf3\x66\x20\x79\xbc\x04\x4c\xac\x90\xaa\x90\x2f\x68\x18\xf4\x42\x6b\x90\x9a\x3c\x0a\xcf\xb2\x31\x15\x5e\xd2\x30\x32\xae\x6d\x3e\xbf\xc0\x98\x7f\x40\x7f\x01\x00\x00\xff\xff\xde\x1d\x1b\x83\xf9\x00\x00\x00")

func templateGoModTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGoModTmpl,
		"template/go.mod.tmpl",
	)
}

func templateGoModTmpl() (*asset, error) {
	bytes, err := templateGoModTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/go.mod.tmpl", size: 249, mode: os.FileMode(420), modTime: time.Unix(1591272110, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateIntegrationGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x41\x0a\xc2\x40\x0c\x85\xe1\x7d\x4e\x11\xba\xd2\x4d\xe7\x10\x2e\x44\x04\x71\xe1\x05\x42\x8d\x35\xd8\xc9\x94\x99\x54\x84\x90\xbb\x0b\x45\x50\xf7\xff\xf7\x78\x33\x0d\x0f\x1a\x19\x33\x89\x02\x48\x9e\x4b\x35\xec\xdc\xfb\xf3\x71\x1f\x91\x44\x8d\xab\xd2\xd4\x01\xa4\x84\x07\x35\x1e\x2b\x99\x14\x45\x69\xb8\x34\xbe\xa2\x15\xe4\xd7\xaa\xec\xce\x28\xdf\x02\x9e\x54\xff\xc5\x67\xab\x77\xef\x2f\x62\x13\xef\xa8\xf1\x89\x32\x47\xfc\x64\x00\xb7\x45\x87\xf5\xcf\x66\x8b\x1e\xf0\x0e\x00\x00\xff\xff\xf7\x7b\x6f\x98\xa2\x00\x00\x00")

func templateIntegrationGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateIntegrationGoTmpl,
		"template/integration.go.tmpl",
	)
}

func templateIntegrationGoTmpl() (*asset, error) {
	bytes, err := templateIntegrationGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/integration.go.tmpl", size: 162, mode: os.FileMode(420), modTime: time.Unix(1591270107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateIntegrationYmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x4d\x6f\xd3\x40\x10\xbd\xe7\x57\x8c\x22\x8e\xd4\x91\x38\x5a\x26\x52\xa9\x10\x54\x54\x10\x95\x56\x15\xa7\x6a\x63\x4f\xec\x21\xeb\x1d\x33\x3b\x9b\x28\x44\xfe\xef\x68\xed\xb4\xb1\x49\x0b\xe2\xc0\xad\xb7\xf5\xbc\x37\xb3\x6f\xbe\xbc\xce\xd4\x98\xc2\x74\xbf\x4f\x6e\x48\x2d\x5e\x18\x8f\x9f\x4d\x8d\x6d\x3b\x9d\x08\xae\xee\x75\xd7\x1c\xe0\x2b\xde\xa2\x0c\xe1\x02\x7d\x2e\xd4\x28\xb1\x4b\x61\x7a\x53\x91\x07\xf2\xa0\x15\x02\xaf\x56\x94\x93\xb1\xb0\xdf\xc3\x38\x2c\xb4\x2d\x90\x53\x2c\xc5\x44\x3f\x58\xb1\xc0\x82\x5c\xc3\xe4\x74\x3a\x69\xc2\xd2\x92\xaf\x50\xd2\x09\xc0\x51\xd8\xe2\xc1\xfc\x70\x33\x40\x10\xfb\x1b\x76\x7b\x7d\xd5\x43\x66\x63\xd4\xc8\xfd\x29\xe3\xbc\x03\x22\x29\x37\x8d\x59\x92\x25\x25\xf4\xe9\x64\xbf\x3f\x03\x31\xae\x44\x78\xb5\x31\x16\xd2\xb7\x90\x5c\x0c\x08\xd0\xb6\x13\x80\xb3\x98\x4b\x87\xb7\x6d\xe7\x81\xae\x68\xdb\x09\x39\xaf\xc6\xda\x2e\x99\x28\xba\xe6\x22\x86\x04\x88\x1e\xb9\xe5\x50\x1c\xce\x1e\xed\xaa\x36\xce\x94\x18\x2d\x39\xbb\x15\x95\x3d\xaf\x63\xf5\x47\x00\x87\xba\x65\x59\x3f\x7c\x02\x54\xec\x35\x56\xc2\x1f\x4d\x31\xdc\xd4\x34\x94\x94\xa4\x55\x58\x26\x39\xd7\xd3\x03\x38\x4e\xec\x48\xdf\xe2\x32\xf9\xc8\xbc\x1e\x98\x4c\xd0\x2a\xf9\x72\x1e\xb4\x7a\x73\xb0\x8e\xfa\x39\x7f\xa4\x66\xcd\x7c\x70\xf5\x5d\x85\x0e\x76\x1c\x3a\x7f\x16\xfa\x89\x8f\xfd\x03\x65\x30\x79\x8e\xde\x47\x82\x3c\xdd\x7c\x93\xe7\x1c\x9c\xbe\xee\x62\x6c\xc9\x5a\x28\xc5\x38\x85\xcc\xab\xb0\x2b\xe7\xd7\x68\x0a\x30\xae\x80\x3b\x21\xc5\x6c\x76\x30\x43\x83\x52\x93\xf7\xc4\xce\x83\xf2\x31\xb7\x6c\x36\x90\x97\x05\x3b\xd4\x0a\x90\x59\x9a\x2f\x84\xbf\x63\xae\x3e\x9b\x59\x3a\x45\x6f\x3d\xca\x33\xd0\x07\xe1\xd0\x3c\x83\x5d\x7a\x1f\xf0\x19\xec\x1d\x1b\x29\x4e\xb0\x6c\x36\x14\x37\x2e\xea\x37\x0e\x90\x1b\x07\x82\x1b\x5e\x23\x68\x5c\xa5\x43\x25\x8d\x82\x71\x3b\x50\xaa\x11\x96\x3b\x10\xd4\x20\x8e\x5c\x19\x8b\x1d\x57\xed\x2b\xaa\x92\x2b\x7d\x57\xb3\x02\x2d\x6a\x07\x76\xcb\x38\xd8\x33\x96\xde\x7b\xc3\xeb\x88\x93\x02\xb9\x3f\x75\xa9\xa8\xc9\x91\xd7\xde\x3b\x39\xad\xf6\x60\x9c\xd3\x97\xf1\x79\x19\x9f\x71\x97\xde\x3b\x45\x69\x84\x3c\x82\x47\xd9\xa0\xfc\x7d\xa0\x00\xb8\x1b\x9d\xd1\x6f\xab\x7f\x02\x82\xd8\x41\xb2\xa3\x31\x5b\x58\x34\x1e\xa1\x11\xde\x50\x81\x5d\x46\xb7\xd7\x57\x31\xb9\x4e\xdc\x40\xc7\x93\x3a\x7b\x71\x83\xe0\xfd\x6b\xe7\x55\xc8\x95\x03\xb3\xe0\x8f\x40\x82\x45\x0a\x2a\x01\x4f\x04\x9a\x86\xee\xd7\xb8\xfb\x07\x91\xe7\x8b\xcb\x4f\xb8\xfb\xdf\x3a\x7f\x05\x00\x00\xff\xff\xce\xb0\xec\x24\xdb\x07\x00\x00")

func templateIntegrationYmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateIntegrationYmlTmpl,
		"template/integration.yml.tmpl",
	)
}

func templateIntegrationYmlTmpl() (*asset, error) {
	bytes, err := templateIntegrationYmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/integration.yml.tmpl", size: 2011, mode: os.FileMode(420), modTime: time.Unix(1591222635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInternalRootGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4b\x6f\xdc\x36\x10\x3e\x93\xbf\x62\xaa\x93\xb6\xd8\xae\xfa\x7e\x18\xd0\xa1\x70\x8a\xc6\x80\x1b\xb4\x88\x81\x1c\x8a\xc2\xa0\xa4\x91\xc4\x9a\x22\x19\x6a\x94\x4d\x6a\xec\x7f\x2f\xf8\xda\x95\x53\xbb\x5b\x03\xdd\xcb\x52\x43\xce\xcc\xc7\x6f\x86\xdf\x58\xd1\xde\x89\x01\x41\x6a\x42\xa7\x85\xe2\x5c\x4e\xd6\x38\x82\x92\xb3\x62\x90\x34\x2e\xcd\xae\x35\x53\x65\xa5\xb6\x54\x89\x01\x35\xed\x34\xbe\xa7\x6a\xee\xee\x0a\xbe\xe1\xbc\xaa\xe0\xfe\x1e\x76\x37\x92\x14\x5e\x8a\x19\x5f\x89\x09\xe1\x70\xb8\xd2\x84\x83\x13\x24\x8d\x06\x39\x83\xd0\x21\x43\xb6\xf4\xc6\x3d\xea\xc5\xe9\x83\xc5\xb3\xf1\x66\x72\x4b\x4b\x70\xcf\x99\x32\xc3\x80\x0e\x60\xee\xee\x76\xd7\x61\xcd\x59\x6b\x74\x2f\x87\x68\xbb\x0c\x6b\xce\x26\xa1\x85\x3f\xe8\x6d\xbf\xc4\x35\x67\x0e\xfb\x90\x6e\x26\x27\xf5\xc0\x39\x1b\x9c\xb0\xe3\x5b\x05\x10\x9d\x7f\xf6\x9f\xbf\x5d\x5f\x2a\x89\x9a\x38\x1b\x89\x6c\x1b\xd6\x61\xf7\xe5\xcd\xcd\xaf\x69\xeb\xc0\xf9\x3b\xe1\xe0\x36\xd8\xd7\x40\x6b\x28\x3f\x3d\x73\x99\x4d\xa9\xa5\x8a\x34\xbe\x26\xe1\xc8\x93\xd5\x0a\xa5\xb0\x83\xfd\x88\x1a\x68\xc4\x07\xcc\xc9\x19\x66\x7f\x4e\xea\x01\x16\xcb\xfb\x45\xb7\x50\x0e\x70\x36\x4d\x8c\x5e\x26\xc2\x4e\x7c\x6d\x21\xf1\x75\xa2\x6b\x0b\x8f\xd0\xb5\x01\x74\xce\x57\x8d\xb3\x61\x97\xa2\xd4\x39\xce\x1b\x49\x63\x0a\xbd\x85\xc2\xde\x0d\xc5\x16\x0a\x8f\xe8\xda\xec\xd1\xad\x10\x15\x1b\xef\x9e\x32\xd6\x29\xb5\x37\xe5\x8c\x75\xce\xed\x8d\xb9\x40\xf5\x13\xc1\x38\x4b\xf9\xaf\x74\x6f\xca\x0c\x6b\x0b\x45\x66\xc8\xa7\x73\x48\x8b\xd3\xa0\xa5\xf2\x75\xaa\x2a\x78\x83\xcd\x4b\x63\xee\x3e\x26\x5a\xc0\x1e\x9b\x31\x6d\x38\x6c\x51\xbe\xc3\x0e\x8c\x86\x06\x47\xa1\x7a\x30\xfd\xc7\xb5\x78\x06\xf9\x29\x67\x99\x53\x78\xdc\xc9\xb6\x22\xf6\x89\xdb\x64\x27\x6d\x08\xe4\x64\x15\x4e\xa8\x09\xbb\x47\x2f\xf7\x9a\x8c\xfd\x2f\x2d\x34\x2e\x14\x5a\xa8\x33\xfb\xf8\x1a\x5b\x85\x42\x3f\xb3\xa1\x8c\x2d\xcf\xa3\x9f\xc9\x58\xfb\x54\x2d\x7e\x7a\x1f\xb4\xe6\x04\x98\x0c\x10\x2a\xf5\x0f\xcc\x64\xc0\x2d\xda\xcb\x08\x06\x97\x67\xe0\x8c\x39\xca\xe8\x17\x98\x8f\x96\xf3\xd0\xb3\x8b\xef\xa6\xc0\x37\x67\xc7\x67\x3a\x2d\x33\x41\x83\x2b\xdc\x0d\x0e\x72\x85\x10\x84\xee\x72\x1f\x81\x00\x2b\x2d\x06\xa2\x67\xd4\x5d\x60\x5e\x90\xe0\xcc\x9b\xb7\x1e\x08\x5c\xd4\xc9\x71\x17\x5f\xea\x86\x33\xd9\x87\x9d\x4f\x6a\xcf\x98\xc7\x99\x09\x44\xe7\x38\x3b\x1c\xe1\x10\x06\x89\x85\x76\x99\xc9\x4c\xfe\xdd\x5a\x6c\x65\x2f\x5b\x0f\x9d\x10\x4c\xf3\x27\xb6\x14\xb2\xd3\x28\xe7\x07\xc4\x7a\x94\xd9\x8f\xb3\x78\xfe\x01\x14\xc2\x32\x5d\xfc\x32\x1d\xbb\x7a\x01\x7b\xa9\x14\x24\x30\xbe\x54\xc7\xcc\xb2\x4b\x69\x30\x17\x8a\xb5\x27\xb7\x53\xe0\x53\xac\x63\xf4\x28\x0a\x61\x56\x7c\x78\xe4\x2a\x51\x2b\x96\xd5\x00\x09\x77\x39\x61\x4f\xaa\xb2\xca\x11\x0c\x21\xfe\xb0\xcb\xda\x5e\xc3\x51\x6c\xb2\xc0\x27\x85\x2b\x37\xbb\x57\xb8\x2f\x0b\xaf\xf3\xf3\x45\x55\xcd\x66\xc2\xdb\xe4\x76\x2b\xac\x0c\x63\xb0\xf0\xe2\x68\x7f\x8f\x23\xe3\x8f\xf8\xe7\x0b\x53\xfc\xb8\xd0\x68\x9c\xfc\x2b\xc0\x2b\x2e\xa0\x68\x50\x38\x74\xf0\xc5\x97\x5f\x7d\xfd\xcd\xb7\xdf\x7d\xff\xc3\xe7\xc5\x96\xb3\x43\xd0\xbf\xd5\x24\x59\xc3\xf1\x13\xe5\xdf\xb0\x38\x9c\xe9\x7f\x04\x72\x6c\xfb\x17\xd8\x2c\xc3\x53\x7d\x1f\x5f\x6e\xa8\x50\xf8\xce\xdd\x3d\xa2\xc3\x60\xfd\x6c\xfd\x0b\x16\xff\x24\xa0\x35\x5e\xa9\x28\x6b\x50\x67\x34\x72\xce\x8e\x95\x49\x9b\x69\xf8\x79\xaf\xb7\x8b\x24\x8c\xcd\x64\x26\x2b\x15\xba\x0b\xce\x6e\xa1\x0e\x2f\x27\xae\x42\x77\xc6\xe5\xa9\xa9\xd2\x77\x9a\x24\x0f\x14\xe6\xef\x00\x00\x00\xff\xff\xe6\x9a\x31\xd1\xdc\x08\x00\x00")

func templateInternalRootGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInternalRootGoTmpl,
		"template/internal/root.go.tmpl",
	)
}

func templateInternalRootGoTmpl() (*asset, error) {
	bytes, err := templateInternalRootGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/internal/root.go.tmpl", size: 2268, mode: os.FileMode(420), modTime: time.Unix(1591270705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/README.md.tmpl":        templateReadmeMdTmpl,
	"template/go.mod.tmpl":           templateGoModTmpl,
	"template/integration.go.tmpl":   templateIntegrationGoTmpl,
	"template/integration.yml.tmpl":  templateIntegrationYmlTmpl,
	"template/internal/root.go.tmpl": templateInternalRootGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"README.md.tmpl":       &bintree{templateReadmeMdTmpl, map[string]*bintree{}},
		"go.mod.tmpl":          &bintree{templateGoModTmpl, map[string]*bintree{}},
		"integration.go.tmpl":  &bintree{templateIntegrationGoTmpl, map[string]*bintree{}},
		"integration.yml.tmpl": &bintree{templateIntegrationYmlTmpl, map[string]*bintree{}},
		"internal": &bintree{nil, map[string]*bintree{
			"root.go.tmpl": &bintree{templateInternalRootGoTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

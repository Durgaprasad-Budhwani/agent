package internal

import (
	"github.com/pinpt/agent/v4/sdk"
)

// {{ .TitleCaseName }}Integration is an integration for {{ .TitleCaseName }}
type {{ .TitleCaseName }}Integration struct {
	config  sdk.Config
	manager sdk.Manager
	refType string
}

var _ sdk.Integration = (*{{ .TitleCaseName }}Integration)(nil)

// Start is called when the integration is starting up
func (g *{{ .TitleCaseName }}Integration) Start(logger sdk.Logger, config sdk.Config, manager sdk.Manager) error {
	g.config = config
	g.manager = manager
	g.refType = "{{ .LowerCaseName }}"
	sdk.LogInfo(logger, "starting")
	return nil
}

// Stop is called when the integration is shutting down for cleanup
func (g *{{ .TitleCaseName }}Integration) Stop(logger sdk.Logger) error {
	sdk.LogInfo(logger, "stopping")
	return nil
}


// Enroll is called when a new integration instance is added
func (g *{{ .TitleCaseName }}Integration) Enroll(instance sdk.Instance) error {
	logger := instance.Logger()
	sdk.LogInfo(logger, "enroll not implemented")
	return nil
}

// Dismiss is called when an existing integration instance is removed
func (g *{{ .TitleCaseName }}Integration) Dismiss(instance sdk.Instance) error {
	logger := instance.Logger()
	sdk.LogInfo(logger, "dismiss not implemented")
	return nil
}

// WebHook is called when a webhook is received on behalf of the integration
func (g *{{ .TitleCaseName }}Integration) WebHook(webhook sdk.WebHook) error {
	logger := webhook.Logger()
	sdk.LogInfo(logger, "webhook not implemented")
	return nil
}

// Mutation is called when a mutation request is received on behalf of the integration
func (g *{{ .TitleCaseName }}Integration) Mutation(mutation sdk.Mutation) (*sdk.MutationResponse, error) {
	logger := mutation.Logger()
	_ = logger
	return nil, nil
}

// Export is called to tell the integration to run an export
func (g *{{ .TitleCaseName }}Integration) Export(export sdk.Export) error {
	logger := export.Logger()
	
	started := time.Now()
	sdk.LogInfo(logger, "export started")

	// Pipe must be called to begin an export and receive a pipe for sending data
	pipe := export.Pipe()

	// State is a customer specific state object for this integration and customer
	state := export.State()

	// CustomerID will return the customer id for the export
	customerID := export.CustomerID()

	// Config is any customer specific configuration for this customer
	config := export.Config()

	sdk.LogDebug(logger, "export starting")

	// start export here
	// -------------
	// quite the compiler:
	_ = pipe
	_ = state
	_ = customerID
	_ = config


	sdk.LogInfo(logger, "export finished", "duration", time.Since(started))
	return nil
}

// AutoConfigure is called when a cloud integration has requested to be auto configured
func (g *{{ .TitleCaseName }}Integration) AutoConfigure(autoconfig sdk.AutoConfigure) (*sdk.Config, error) {
	logger := autoconfig.Logger()
	_ = logger
	return nil, nil
}

// Validate is called before a new integration instance is added to determine
// if the config is valid and the integration can properly communicate with the
// source system. The result and the error will both be delivered to the App.
// Returning a nil error is considered a successful validation.
func (g *{{ .TitleCaseName }}Integration)Validate(validate sdk.Validate) (result map[string]interface{}, err error) {
	logger := validate.Logger()
	_ = logger
	return nil, nil
}
